<?xml version="1.0" encoding="ISO-8859-1"?>
<vxml version="2.1" xmlns="http://www.w3.org/2001/vxml" xml:lang="en-US">

  <catch event="connection.disconnect.hangup">
    <goto next="#notification_of_error"/>
  </catch>

  <!-- Allowing bargein during biometric operations can have a negative effect, so force
       explicit enable of bargein for allowed forms -->
  <property name="bargein" value="false"/>

  <!-- This URL is the VoiceVault REST API location, and is a primary
       input into the Voice Verification component. It is passed in
       by the calling form. -->  
  <var name="api_url" />

  <!-- Credentials information are passed in by the calling form. -->
  <var name="username" />
  <var name="password" />

  <!-- external_ref is passed in by the calling form -->
  <var name="external_ref" />
  <!-- format is passed in by the calling form -->
  <var name="format" />

  <!-- The configuration ID defines the server side configuration policy to use
       for the biometric operations. This is typically provided by VoiceVault. -->
  <var name="configuration_id"/>
  
  <!-- The claimant identifier is generated by a previous call to the
       RegisterClaimant API function. -->
  <var name="claimant_id"/>

  <!-- Output variables -->  
  <var name="process_result" expr="'Error'"/>
  <var name="dialogue_id"/>
  <var name="process_type"/>
  
  <!-- State variables used in the code below, do not change -->
  <var name="prompt_hint"/>
  <var name="dialogue_status"/>
  <var name="failure_reason"/>
  <var name="request_status"/>
  <var name="prompt_array_of_char" />

  <!-- A convenience variable to allow easy update and rollback of prompts -->
  <var name="prompt_path" expr="'prompts/'"/>

  <!-- The maximum number of times to try to get input from a caller -->
  <var name="max_tries" expr="3"/>

  <!-- The language to use for biometric dialogues - do not change -->
  <var name="language" expr="'EnglishUnitedStates'"/>
  
  <!-- State variables used in the code below, do not change -->
  <var name="tries"/>
  <var name="status_code"/>
  <var name="status_message"/>

  <var name="num_prompts" expr="0"/>


  <form id="initialise">
    <!-- Initialise all of the variables passed in.   
    -->
    <var name="vve_api_url" />
    <var name="vve_username" />
    <var name="vve_password" />
    <var name="vve_external_ref" />
    <var name="vve_format" />
    <var name="vve_configuration_id"/>
    <var name="vve_claimant_id"/>
    
    <block>
      <assign name="api_url" expr="vve_api_url" />
      <assign name="username" expr="vve_username" />
      <assign name="password" expr="vve_password" />
      <assign name="external_ref" expr="vve_external_ref" />
      <assign name="format" expr="vve_format" />
      <assign name="configuration_id" expr="vve_configuration_id"/>
      <assign name="claimant_id" expr="vve_claimant_id"/>
      
      <goto next="#start_dialogue"/>
    </block>
  </form>

  <!-- The input parameters to the VoiceVault Fusion sub dialog are:
       username, password, configuration_id, claimant_id, and external_ref.
       Except for claimant_id these are well defined values that correspond
       either to the organisation/application (username, password, configuration_id)
       or to the specific call (external_ref). claimant_id must be obtained
       from the VoiceVault Fusion system in advance with a call to the
       RegisterClaimant REST API function, and this should be permanently 
       mapped to the real world identifier known to the human caller.
       
       Also api_url and prompts need to be defined, as these are used
       as prefixes to the data and prompt fetch calls. These could be intrinsic
       or they could be parameterised also.  It may be best to parameterise
       the api_url, because we tend to host different instances of the
       API for different purposes.
  -->
  
  <form id="start_dialogue">
    <!-- First we create a new dialogue (session) for the specified
         claimant (user) user the required configuration (or security policy).   
    -->
    <block>
      <data fetchtimeout="10s" name="result" srcexpr="api_url + '/StartDialogue.ashx'" method="post" namelist="username password configuration_id claimant_id external_ref language"/>
      <script>
        <![CDATA[
	      status_code = result.documentElement.getElementsByTagName("status_code").item(0).firstChild.data;
	      if (status_code == 0)
	      {
	        dialogue_id = result.documentElement.getElementsByTagName("dialogue_id").item(0).firstChild.data;
	        prompt_hint = result.documentElement.getElementsByTagName("prompt_hint").item(0).firstChild.data;
	        process_type = result.documentElement.getElementsByTagName("process_type").item(0).firstChild.data;
        } else {
          status_message = result.documentElement.getElementsByTagName("message").item(0).firstChild.data;
        }
	    ]]>
      </script>

      <if cond="status_code == 0" >
        <goto next="#obtain_phrase" />
      <else/>
        <goto next="#notification_of_error" />
      </if>
    </block>
  </form>

  <form id="obtain_phrase">
    <property name="bargein" value="false"/>
    
  <!-- The Obtain Phrase form asks the user to repeat the phrase specified by 
       the prompt hint variable as provided by either by StartDialogue (for the 
       first prompt) or SubmitPhrase (for subsequent prompts).  

       After recording the user speaking the requisite phrase
       a data call is made to the SubmitPhrase web application to provide the engine 
       with the recording of the phrase and associated data.  The XML response is 
       parsed into appropriate variables, including updating the prompt hint variable.
  -->
    <block>
      <assign name="tries" expr="0"/>
      
    </block>

    <!-- record raw audio for 3 seconds then submit it to VoiceVault -->
    <record name="utterance" maxtime="3s" type="audio/wav">

      <property name="timeout" value="3s"/>

      <!-- We are assuming here that the VoiceVault 4-digit challenge/response
           mode of operation is in use, therefore the prompt hint will be a string
           of 4 digits that we can split up into individual prompts. -->
      <prompt>
        <audio fetchhint="prefetch" fetchtimeout="2s" maxage="0" maxstale="0" expr="prompt_path + 'please_say.wav'">Please say</audio>
        <audio fetchtimeout="2s" maxage="0" maxstale="0" expr="prompt_path + prompt_hint.substring(0, 1) + '.wav'"><value expr="prompt_hint.substring(0, 1)"/></audio>
        <audio fetchtimeout="2s" maxage="0" maxstale="0" expr="prompt_path + prompt_hint.substring(1, 2) + '.wav'"><value expr="prompt_hint.substring(1, 2)"/></audio>
        <audio fetchtimeout="2s" maxage="0" maxstale="0" expr="prompt_path + prompt_hint.substring(2, 3) + '.wav'"><value expr="prompt_hint.substring(2, 3)"/></audio>
        <audio fetchtimeout="2s" maxage="0" maxstale="0" expr="prompt_path + prompt_hint.substring(3) + '.wav'"><value expr="prompt_hint.substring(3)"/></audio>
      </prompt>

      <filled>
        <var name="prompt" expr="prompt_hint"/>

        <assign name="num_prompts" expr="parseInt(num_prompts)+1"/>

        <!-- Send the recorded phrase to VoiceVault -->
        <data fetchtimeout="10s" name="result" srcexpr="api_url + '/SubmitPhrase.ashx'" method="post" enctype="multipart/form-data" namelist="username password dialogue_id prompt format utterance"/>
        <script>
          <![CDATA[
  	      status_code = result.documentElement.getElementsByTagName("status_code").item(0).firstChild.data;
  	      if (status_code == 0)
  	      {
  	        dialogue_status = result.documentElement.getElementsByTagName("dialogue_status").item(0).firstChild.data;
  	        failure_reason = result.documentElement.getElementsByTagName("failure_reason").item(0).firstChild.data;
  	        request_status = result.documentElement.getElementsByTagName("request_status").item(0).firstChild.data;
            if (result.documentElement.getElementsByTagName('prompt_hint').item(0).firstChild != null)
            {
  	          prompt_hint = result.documentElement.getElementsByTagName("prompt_hint").item(0).firstChild.data;
            }
          } else {
            status_message = result.documentElement.getElementsByTagName("message").item(0).firstChild.data;
          }
  	    ]]>
        </script>
  
        <if cond="status_code == 0" >
          <goto next="#make_progress_decision"/>
        <else/>
          <goto next="#notification_of_error" />
        </if>

      </filled>
    </record>
  </form>

  <form id="make_progress_decision">
  <!-- The Make Progress Decision form analyses the response variables from either 
       the Obtain Phrase or Polling for Status forms and decides how next to proceed.

       o	If dialogue_status is STARTED(0) and request_status is OK(0) then more 
          phrases are needed, so flow returns to Obtain Phrase.
       o	If dialogue_status is STARTED(0) and request_status is TOO_MANY_UNPROCESSED_PHRASES(10) 
          then processing is being carried out and flow moves to Polling for Status.
       o	If dialogue_status is SUCCEEDED(1) and process_type is ENROL(1) then the 
          enrolment completed successfully and flow moves on to Invitation to Verify
       o	If dialogue_status is SUCCEEDED(1) and process_type is VERIFY(2) then the 
          verification attempt was accepted and flow moves on to Presentation of 
          Result having noted this result in a variable
       o	If dialogue_status is FAILED(2) and process_type is VERIFY(2) and failure_reason 
          is VERIFICATION_FAILED(5) then the verification attempt was rejected and flow moves 
          on to Presentation of Result having noted this result in a variable
       o	Any other combination of values is considered an error and the flow moves 
          on to Notification of Error
  -->
    <block>
      <!-- More phrases needed? -->
      <if cond="dialogue_status == 'Started' &amp;&amp; request_status == 'OK'" >
        <goto next="#obtain_phrase" />
      <!-- Outstanding processing? -->
      <elseif cond="dialogue_status == 'Started' &amp;&amp; request_status == 'TooManyUnprocessedPhrases'" />
        <goto next="#polling_for_status" />
      <!-- Enrolment completed? -->
      <elseif cond="dialogue_status == 'Succeeded' &amp;&amp; process_type == 'Enrol'" />
        <assign name="process_result" expr="'Success'"/>
        <goto next="#notification_of_result" />
      <!-- Verification completed? -->
      <elseif cond="dialogue_status == 'Succeeded' &amp;&amp; process_type == 'Verify'" />
        <assign name="process_result" expr="'Accept'"/>
        <goto next="#notification_of_result" />
      <elseif cond="dialogue_status == 'Failed' &amp;&amp; process_type == 'Verify' &amp;&amp; failure_reason == 'VerificationFailed'" />
        <assign name="process_result" expr="'Reject'"/>
        <goto next="#notification_of_result" />
      <else />
        <goto next="#notification_of_error" />
      </if>
    </block>
  </form>

  <form id="polling_for_status">
  <!-- The Polling for Status form is designed to play some hold audio or other 
       prompt to the caller that covers a time period in which engine processing 
       is taking place (or indeed issues a short period of silence) then makes a 
       data call to the GetDialogueSummary web application.  The XML response is 
       parsed into appropriate variables, including updating the prompt hint variable.
  -->
  
    <!-- See section about field needing to be present at http://www.vxml.org/mot_discoevents.htm#start -->
    <field name="just_in_case_of_hangup">
    
      <property name="timeout" value="1500ms"/>
      <grammar srcexpr="'nomatch.grxml'" type="application/srgs+xml"/> 

      <noinput>
        <throw event="nomatch"/>
      </noinput>
      <filled>
        <goto next="#notification_of_error" />
      </filled>

      <nomatch>
        <data fetchtimeout="20s" name="result" srcexpr="api_url + '/GetDialogueSummary.ashx'" method="get" namelist="username password dialogue_id"/>
        <script>
          <![CDATA[
  	      status_code = result.documentElement.getElementsByTagName("status_code").item(0).firstChild.data;
  	      if (status_code == 0)
  	      {
  	        dialogue_status = result.documentElement.getElementsByTagName("dialogue_status").item(0).firstChild.data;
  	        failure_reason = result.documentElement.getElementsByTagName("failure_reason").item(0).firstChild.data;
  	        request_status = result.documentElement.getElementsByTagName("request_status").item(0).firstChild.data;
            if (result.documentElement.getElementsByTagName('prompt_hint').item(0).firstChild != null)
            {
  	          prompt_hint = result.documentElement.getElementsByTagName("prompt_hint").item(0).firstChild.data;
            }
          } else {
            status_message = result.documentElement.getElementsByTagName("message").item(0).firstChild.data;
          }
  	    ]]>
        </script>
  
        <if cond="status_code == 0" >
          <goto next="#make_progress_decision"/>
        <else/>
          <goto next="#notification_of_error" />
        </if>

      </nomatch>
    </field>
  </form>

  <form id="notification_of_result">
    <block>      
      <goto next="#return_result" />
    </block>
  </form>


  <form id="notification_of_error">
    <block>
      <!--   IMPORTANT: VOICEVAULT FUSION REQUIREMENT  -->
      
      <!-- This data call is important to VoiceVault Fusion, as it cancels
           the in progress dialogue should the caller hang up. The reason this
           is important is that each claimant identifier can only have a single
           enrolment dialogue in progress at a time, so if they hang up during
           enrolment it needs to be cancelled so that they can call back.
           This means that for a quality application to work correctly there
           needs to be a way to wire up the generic disconnect handler to make
           this data call with the specified parameters. This is not strictly
           necessary for a demonstration, it just needs to be known that a hang
           up event during enrolment will prevent that account ID to be used for
           approx 15 minutes. 
      -->
      <data fetchtimeout="10s" name="result" srcexpr="api_url + '/AbortDialogue.ashx'" method="post" namelist="username password dialogue_id"/>      

      <goto next="#return_result" />
    </block>
  </form>

  <form id="return_result">
    <block>
      <var name="vve_dialogue_id" expr="dialogue_id"/>
      <var name="vve_process_type" expr="process_type"/>
      <var name="vve_process_result" expr="process_result"/>
      <var name="vve_num_prompts" expr="num_prompts"/>
      
      <return namelist="vve_dialogue_id vve_process_type vve_process_result vve_num_prompts"/>
    </block>
  </form>

</vxml>
